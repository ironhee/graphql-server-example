type Draft implements Node {
  id: ID!
  content: String
}

type DraftConnection {
  pageInfo: PageInfo!
  edges: [DraftEdge]
}

input DraftCreateMutationInput {
  content: String
  clientMutationId: String!
}

type DraftCreateMutationPayload {
  draftEdge: DraftEdge
  clientMutationId: String!
}

type DraftEdge {
  node: Draft
  cursor: String!
}

input DraftRemoveMutationInput {
  id: String
  clientMutationId: String!
}

type DraftRemoveMutationPayload {
  draftEdge: DraftEdge
  clientMutationId: String!
}

input DraftUpdateMutationInput {
  id: String
  content: String
  clientMutationId: String!
}

type DraftUpdateMutationPayload {
  draftEdge: DraftEdge
  clientMutationId: String!
}

type Mutation {
  createDraft(input: DraftCreateMutationInput!): DraftCreateMutationPayload
  updateDraft(input: DraftUpdateMutationInput!): DraftUpdateMutationPayload
  removeDraft(input: DraftRemoveMutationInput!): DraftRemoveMutationPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type RootQueryType {
  node(id: ID!): Node
  viewer: User
}

type User implements Node {
  id: ID!
  drafts(before: String, after: String, first: Int, last: Int): DraftConnection
}
