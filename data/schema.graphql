type Draft implements Node {
  id: ID!
  content: String
  createdAt: String
}

type DraftConnection {
  pageInfo: PageInfo!
  edges: [DraftEdge]
}

input DraftCreateInput {
  content: String
  clientMutationId: String!
}

type DraftCreatePayload {
  draftEdge: DraftEdge
  clientMutationId: String!
}

type DraftEdge {
  node: Draft
  cursor: String!
}

input DraftRemoveInput {
  id: String
  clientMutationId: String!
}

type DraftRemovePayload {
  draftEdge: DraftEdge
  clientMutationId: String!
}

input DraftUpdateInput {
  id: String
  content: String
  clientMutationId: String!
}

type DraftUpdatePayload {
  draftEdge: DraftEdge
  clientMutationId: String!
}

type Mutation {
  createDraft(input: DraftCreateInput!): DraftCreatePayload
  updateDraft(input: DraftUpdateInput!): DraftUpdatePayload
  removeDraft(input: DraftRemoveInput!): DraftRemovePayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Pool {
  drafts(after: String, first: Int, before: String, last: Int): DraftConnection
}

type Query {
  node(id: ID!): Node
  pool: Pool
}
